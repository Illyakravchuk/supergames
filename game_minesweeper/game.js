function startGame(width, height, bombsCount) {
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ DOM
    const field = document.querySelector('.field');
    const ratingCounter = document.getElementById('opened-count');
    const restartButton = document.getElementById('restart-button');
    const timerDisplay = document.getElementById('timer'); // –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–∞—Å—É
    const startButton = document.getElementById('start-button'); // –∫–Ω–æ–ø–∫–∞ "Start Game"
  
    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª—ñ—Ç–∏–Ω–æ–∫
    const cellCount = width * height;
    field.innerHTML = '';  // –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—è –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–æ—é –Ω–æ–≤–æ—é –≥—Ä–æ—é
    const cells = [];
    for (let i = 0; i < cellCount; i++) {
      const button = document.createElement('button');
      field.appendChild(button);
      cells.push(button);
    }
  
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–º—ñ–Ω–Ω–∏—Ö –≥—Ä–∏
    let closeCount = cellCount;
    let flaggedCount = 0; // –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∞–ø–æ—Ä—Ü—ñ–≤
    let openedCells = 0;  // –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∫–ª—ñ—Ç–∏–Ω–æ–∫
    let timerInterval; // –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É —Ç–∞–π–º–µ—Ä–∞
    let timeElapsed = 0; // –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —á–∞—Å—É
    let gameStarted = false; // —Ñ–ª–∞–≥ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏
  
    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∞—É–¥—ñ–æ –¥–ª—è –≤–∏–±—É—Ö—É
    const explosionSound = new Audio('mine_explosion.mp3');
 
    // –î–æ–¥–∞—î–º–æ —Ñ–æ–Ω–æ–≤—É –º—É–∑–∏–∫—É –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏ "Start"
    document.getElementById('start-button').addEventListener('click', () => {
        const backgroundMusic = new Audio('background_music.mp3');
        backgroundMusic.loop = true; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è
        backgroundMusic.volume = 0.1; // –ó–∞–¥–∞—î–º–æ –≥—É—á–Ω—ñ—Å—Ç—å
        backgroundMusic.play(); // –ü–æ—á–∏–Ω–∞—î–º–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
        
        // –•–æ–≤–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ü–æ—á–∞—Ç–∏ –≥—Ä—É" —ñ –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–ª–µ –≥—Ä–∏ —Ç–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
        startButton.style.display = 'none';
        field.style.display = 'grid'; // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–ª–µ –≥—Ä–∏
        restartButton.style.display = 'inline-block'; // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
    });

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –±–æ–º–±
    const bombs = [...Array(cellCount).keys()]
      .sort(() => Math.random() - 0.5)
      .slice(0, bombsCount);

    // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥
    updateRating(0);

    // –û—á–∏—â–∞—î–º–æ –∫–ª—ñ—Ç–∏–Ω–∫–∏ —Ç–∞ —Å–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä—Ü—ñ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ—é –≥—Ä–æ—é
    cells.forEach(cell => {
      cell.classList.remove('flag');
      cell.innerHTML = '';
      cell.disabled = false; // –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ, —â–æ–± –∫–ª—ñ—Ç–∏–Ω–∫–∏ –Ω–µ –±—É–ª–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ
    });

    // –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∞–ø–æ—Ä—Ü—ñ–≤
    flaggedCount = 0;

    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞
    function updateTimerDisplay(time) {
        const minutes = Math.floor(time / 60);
        const seconds = time % 60;
        timerDisplay.textContent = `–ß–∞—Å: ${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
    }      

    // –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –≥—Ä–∏
    restartButton.addEventListener('click', () => {
      clearInterval(timerInterval); // –ó—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –≥—Ä–∏
      window.location.href = "./index.html";
      startGame(width, height, bombsCount); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –≥—Ä—É
    });

    // –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—ñ–≤ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∫–ª—ñ—Ç–∏–Ω–æ–∫
    field.addEventListener('click', event => {
      if (event.target.tagName !== 'BUTTON' || event.target.classList.contains('flag')) {
        return; // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø—Ä–∞–ø–æ—Ä—Ü—ñ
      }

      if (!gameStarted) {
        gameStarted = true;
        timerInterval = setInterval(() => {
          timeElapsed++;
          updateTimerDisplay(timeElapsed); // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–µ—Ä –∫–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É
        }, 1000);
      }

      const index = cells.indexOf(event.target);
      const column = index % width;
      const row = Math.floor(index / width);
      open(row, column);
    });

    // –û–±—Ä–æ–±–Ω–∏–∫ –ø—Ä–∞–≤–æ–≥–æ –∫–ª—ñ–∫—É –¥–ª—è –ø—Ä–∞–ø–æ—Ä—Ü—ñ–≤
    field.addEventListener('contextmenu', event => {
      event.preventDefault();
      event.stopPropagation();

      if (event.target.tagName !== 'BUTTON') return; // –¢—ñ–ª—å–∫–∏ –¥–ª—è –∫–ª—ñ—Ç–∏–Ω–æ–∫
      const cell = event.target;

      if (cell.disabled) return; // –Ü–≥–Ω–æ—Ä—É—î–º–æ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏

      if (cell.classList.contains('flag')) {
        cell.classList.remove('flag');
        cell.innerHTML = '';
        updateFlaggedCount(-1);
      } else if (flaggedCount < bombsCount) {
        cell.classList.add('flag');
        cell.innerHTML = 'üö©';
        updateFlaggedCount(1);
      } else {
        alert(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∞–ø–æ—Ä—Ü—ñ–≤ –¥–æ—Å—è–≥–Ω—É—Ç–∞! –ü—Ä–∞–ø–æ—Ä—Ü—ñ–≤: ${flaggedCount}, –ú–∞–∫—Å–∏–º—É–º: ${bombsCount}.`);
      }
    });

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—Ä–∞–ø–æ—Ä—Ü—ñ–≤
    function updateFlaggedCount(delta) {
      const newFlaggedCount = flaggedCount + delta;

      if (newFlaggedCount >= 0 && newFlaggedCount <= bombsCount) {
        flaggedCount = newFlaggedCount;
      } else {
        console.log('–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∞–ø–æ—Ä—Ü—ñ–≤!');
      }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏
    function isValid(row, column) {
      return row >= 0 && row < height && column >= 0 && column < width;
    }

    // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –±–æ–º–± –Ω–∞–≤–∫–æ–ª–æ –∫–ª—ñ—Ç–∏–Ω–∫–∏
    function getCount(row, column) {
      let count = 0;
      for (let x = -1; x <= 1; x++) {
        for (let y = -1; y <= 1; y++) {
          if (isBomb(row + y, column + x)) {
            count++;
          }
        }
      }
      return count;
    }

    // –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –∫–ª—ñ—Ç–∏–Ω–∫–∏
    function open(row, column) {
      if (!isValid(row, column)) return;
    
      const index = row * width + column;
      const cell = cells[index];
    
      if (cell.disabled || cell.classList.contains('flag')) return;
    
      cell.disabled = true;
      openedCells++; // –ó–±—ñ–ª—å—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∫–ª—ñ—Ç–∏–Ω–æ–∫
      closeCount--;
      updateRating(openedCells); // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥
    
      if (isBomb(row, column)) {
        cell.classList.add('bomb-hit'); // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –¥–ª—è –≤–∏–±—É—Ö—É
        cell.innerHTML = 'üí£';  
        explosionSound.play(); // –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É –≤–∏–±—É—Ö—É
        revealAllBombs();
        clearInterval(timerInterval); // –ó—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –ø—Ä–æ–≥—Ä–∞—à—ñ
        setTimeout(() => {
          alert(`–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏! –í—ñ–¥–∫—Ä–∏—Ç–æ –∫–ª—ñ—Ç–∏–Ω–æ–∫: ${openedCells}. –ß–∞—Å: ${formatTime(timeElapsed)}`);
          window.location.href = "./index.html"
          startGame(width, height, bombsCount); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –≥—Ä—É
        }, 100); // –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
    
        return;
      }
    
      const count = getCount(row, column);
      if (count !== 0) {
        cell.innerHTML = count;
        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É —á–∏—Å–ª–∞
        updateCellColor(cell, count);
      } else {
        for (let x = -1; x <= 1; x++) {
          for (let y = -1; y <= 1; y++) {
            open(row + y, column + x);
          }
        }
      }
    
      if (closeCount <= bombsCount) {
        clearInterval(timerInterval); // –ó—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –≤–∏–≥—Ä–∞—à—ñ
        setTimeout(() => {
          alert(`–í–∏ –≤–∏–≥—Ä–∞–ª–∏! –í—ñ–¥–∫—Ä–∏—Ç–æ –∫–ª—ñ—Ç–∏–Ω–æ–∫: ${openedCells}. –ß–∞—Å: ${formatTime(timeElapsed)}`);
          window.location.href = "./index.html"
          startGame(width, height, bombsCount); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –≥—Ä—É
        }, 100); // –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
      }
    }
  
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞ —î –±–æ–º–±–æ—é
    function isBomb(row, column) {
      if (!isValid(row, column)) return false;
      const index = row * width + column;
      return bombs.includes(index);
    }
  
    // –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –≤—Å—ñ—Ö –±–æ–º–± –ø—Ä–∏ –ø—Ä–æ–≥—Ä–∞—à—ñ
    function revealAllBombs() {
      bombs.forEach(index => {
        const cell = cells[index];
        cell.innerHTML = 'üí£';
        cell.disabled = true;
      });
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É
    function updateRating(value) {
      ratingCounter.textContent = value;
    }

    // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
    function formatTime(seconds) {
      const minutes = Math.floor(seconds / 60);
      const secs = seconds % 60;
      return `${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É –∫–ª—ñ—Ç–∏–Ω–∫–∏ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —á–∏—Å–ª–∞
    function updateCellColor(cell, count) {
      const colors = ['green', 'blue', 'red', 'purple', 'brown', 'orange', 'pink', 'black'];
      cell.style.color = colors[count - 1];
    }
}

// –ó–∞–ø—É—Å–∫ –≥—Ä–∏ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
document.addEventListener('DOMContentLoaded', () => {
    const startButton = document.getElementById('start-button');
    const field = document.querySelector('.field');
    const restartButton = document.getElementById('restart-button');
  
    startButton.addEventListener('click', () => {
      // –•–æ–≤–∞—î–º–æ –∫–Ω–æ–ø–∫—É "Start Game" —ñ –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–ª–µ –≥—Ä–∏
      startButton.classList.add('hidden');
      field.style.display = 'grid'; // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–ª–µ –≥—Ä–∏
      restartButton.style.display = 'inline-block'; // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
    });
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∏
    const width = 8;
    const height = 8;
    const bombsCount = 8;
    startGame(width, height, bombsCount);
});
